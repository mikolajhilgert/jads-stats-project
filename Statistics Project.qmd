---
title: "Twitch Statistics Project"
html:
  toc: true
  toc-location: left
  html-math-method: katex
  css: styles.css
editor: source
quarto: 
  rmarkdown:
    output_format: pdf_document
---

```{=html}
<div style="text-align:center"> 
JBP061-B-6 Statistics for Data Scientists
<br><br>
Mikolaj Hilgert
</div>
```
## 1. Table of Contents

-   [2. Project Description](#project-description)
-   [3. Data Description](#data-description)
-   [4. Exploratory Data Analysis (EDA)](#Exploratory-Data-Analysis)
-   [5. Statistical Analysis](#Statistical-Analysis)
-   [6. Results](#Results)
-   [7. Strategy Recommendation](#Strategy-Recommendation)
-   [8. Conclusion](#Conclusion)

## 2. Introduction

The goal of this analysis is to evaluate Twitch streamer data and make strategic recommendations for a content creator looking to succeed on the platform. The goal is to assist the content creator in making informed decisions and improving the performance of their Twitch channel.


1. Should there be a focus on mature content (18+) audience? What are the consequences one decides to do so in terms of audience reactions?

2. Does this choice lower or increase the chance of becoming a Twitch partner? 

3. Is the effect of the stream minutes larger or smaller in mature content? 


## 3. Data Description {#data-description}

Loading of our data-set and all the relevant libraries

```{r, results='hide', message=FALSE, warning=FALSE, error=FALSE}
twitch_data <- read.csv("twitch_data.csv")
library(gridExtra)
library(tidyverse)
library(ggcorrplot)
```

```{r}
head(twitch_data, 4)
```
The raw column names are in need of renaming for more consistency and future ease of access: 
```{r}
twitch_data <- twitch_data %>% 
  rename(Watch.time = Watch.time.Minutes., Stream.time = Stream.time.minutes.)
```
```{r}
summary(twitch_data)
```


## 4. Exploratory Data Analysis (EDA) {#Exploratory-Data-Analysis}

To gain some initial insight into the top performing Streamers on the platform, we can take a look at the top 10 Streamers by watch-time, as well as showing whether they are Mature or not.
```{r}
top_20_streamers_watch_time <- twitch_data %>%
  arrange(desc(Watch.time)) %>%
  head(20)

ggplot(top_20_streamers_watch_time, aes(x = reorder(Channel, -Watch.time), y = Watch.time, fill = Mature)) +
  scale_y_continuous(labels = scales::comma) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("skyblue", "orange"), labels = c("Not Mature", "Mature")) +
  ggtitle("Top 20 Twitch Streamers by Time Watched") +
  xlab("Streamers") +
  ylab("Watch time (minutes)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
```{r}
mature <- twitch_data %>% filter(Mature == 'True')
mature_partnered <- mature %>% filter(Partnered == 'True')

str_interp("${nrow(mature) / nrow(twitch_data) * 100}% of streamers in the top 1000 stream to a mature audience.")

str_interp("${round(nrow(mature_partnered) / nrow(mature) * 100,2)}% of streamers that stream to a mature audience and are also partnered.")
```

Language of streamers.
```{r}
twitch_data %>%
  group_by(Language) %>%
  summarize(Count = n()) %>%
  ggplot(aes(x = reorder(Language, -Count), y = Count)) +
  geom_bar(stat = "identity") +
  labs(x = "Language", y = "Count") +
  coord_flip()
```

```{r}
# select all numeric columns
numeric <- twitch_data %>% 
  select_if(is.numeric)

# create a list of ggplot objects for each column
plots <- lapply(names(numeric), function(col) {
  ggplot(numeric, aes(x = !!sym(col))) +
    geom_density() +
    ggtitle(col) +
    theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5)) + 
    scale_x_continuous(labels = scales::comma)
})

# plot the list of ggplot objects in a grid
grid.arrange(grobs = plots, ncol = 2)
```
```{r}
ggcorrplot(cor(numeric), lab = TRUE, type = "lower", outline.col = "white", hc.order = TRUE)
```

## 5. Statistical Analysis {#Statistical-Analysis}

## 6. Results {#Results}

## 7. Strategy Recommendation {#Strategy-Recommendation}

## 8. Conclusion {#Conclusion}
