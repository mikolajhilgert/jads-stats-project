---
title: "Twitch Statistics Project"
html:
  toc: true
  toc-location: left
  html-math-method: katex
  css: styles.css
editor: source
quarto: 
  rmarkdown:
    output_format: pdf
output:
  pdf_document:
    geometry: margin=1in
---

```{=html}
<div style="text-align:center"> 
JBP061-B-6 Statistics for Data Scientists
<br><br>
Mikolaj Hilgert
</div>
```

## 1. Table of Contents

-   [2. Project Description](#project-description)
-   [3. Data Description](#data-description)
-   [4. Exploratory Data Analysis (EDA)](#Exploratory-Data-Analysis)
-   [5. Statistical Analysis](#Statistical-Analysis)
-   [6. Results](#Results)
-   [7. Conclusion](#Conclusion)
-   [8. Appendix](#Appendix)

## 2. Introduction

The goal of this analysis is to evaluate Twitch streamer data and make strategic recommendations for a content creator looking to succeed on the platform. The goal is to assist the content creator in making informed decisions and improving the performance of their Twitch channel.

1.  Should there be a focus on mature content (18+) audience? What are the consequences one decides to do so in terms of audience reactions?

2.  Does this choice lower or increase the chance of becoming a Twitch partner?

3.  Is the effect of the stream minutes larger or smaller in mature content?

## 3. Data Description {#data-description}

Loading of our data-set and all the relevant libraries


```{r, results='hide', message=FALSE, warning=FALSE, error=FALSE}
twitch_data <- read.csv("twitch_data.csv")
library(gridExtra)
library(ggcorrplot)
library(tidyverse)
library(sjPlot)
```


We will first inspect the raw data set, such that we can take a look at the data we are working with. From this we can see the columns.


```{r, warning=FALSE}
colnames(twitch_data)

head(twitch_data, 4)
```


We want to firstly check if there are any missing/null values present in our data set.


```{r, warning=FALSE}
print(any(sapply(twitch_data, is.null)))
```


From this, we can see that there is no missing data in any of the columns. As such, this means that we do not have to do much preliminary data cleaning.

The raw column names are in need of renaming for more consistency and future ease of access:


```{r, warning=FALSE}
twitch_data <- twitch_data %>%
  rename(Watch.time.hours = Watch.time.Minutes.,
         Stream.time.hours = Stream.time.minutes.,
         Followers.delta = Followers.gained) %>%
  mutate(
    Watch.time.hours = Watch.time.hours / 60,
    Stream.time.hours = Stream.time.hours / 60
  )
```


## 4. Exploratory Data Analysis (EDA) {#Exploratory-Data-Analysis}

We can firstly take a look at the summary statistics of our data set.


```{r, warning=FALSE}
summary(twitch_data)
```

These values provide an overview of the range, central tendency, and distribution of the metrics in the data set. Further analysis can provide deeper insights into relationships, trends, and patterns within the data.

One thing we can also already notice is that we have both numerical and nominal values. As such we can already split them up for convenience.


```{r, warning=FALSE}
numeric <- twitch_data %>% 
  select_if(is.numeric)

nominal <- twitch_data %>% 
  select_if(negate(is.numeric))

head(numeric)
head(nominal)
```


To gain some initial insight into the top performing Streamers on the platform, we can take a look at the top 10 Streamers by watch-time, as well as showing whether they are Mature or not.


```{r, warning=FALSE, echo=FALSE}
top_20_streamers_watch_time <- twitch_data %>%
  arrange(desc(Watch.time.hours)) %>%
  head(20)

suppressWarnings({
 ggplot(top_20_streamers_watch_time, aes(x = reorder(Channel, -Watch.time.hours), y = Watch.time.hours, fill = Mature)) +
  scale_y_continuous(labels = scales::comma) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("skyblue", "orange"), labels = c("Not Mature", "Mature")) +
  ggtitle("Top 20 Twitch Streamers by Time Watched") +
  xlab("Streamers") +
  ylab("Watch time (hours)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
```

We can look at another success metric of average viewers.

```{r, warning=FALSE, echo=FALSE}
top_20_streamers_avg_viewers <- twitch_data %>%
  arrange(desc(Average.viewers)) %>%
  head(20)

suppressWarnings({
 ggplot(top_20_streamers_avg_viewers, aes(x = reorder(Channel, -Average.viewers), y = Average.viewers, fill = Mature)) +
  scale_y_continuous(labels = scales::comma) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("skyblue", "orange"), labels = c("Not Mature", "Mature")) +
  ggtitle("Top 20 Twitch Streamers by Average Viewership") +
  xlab("Streamers") +
  ylab("Average Viewership") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
})
```

We may also take a look at the correlation between our numerical variables to see if there is any relationship we can observe.

```{r, warning=FALSE}
ggcorrplot(cor(numeric), lab = TRUE, type = "lower", outline.col = "white",
           hc.order = TRUE)
```


Seeing this, We can consider the following 3 interesting insights gained from the matrix, though it must be kept in mind that correlation does not necessarily imply causation.

-   Watch time hours have a strong positive correlation with followers (0.6202), meaning as watch time increases, follower count tends to increase as well.
-   Peak viewers have a strong positive correlation with average viewers (0.6826), suggesting that higher peak viewership is associated with higher average viewership.
-   Followers have a strong positive correlation with followers delta (0.7156), indicating that as the number of followers increases, the growth rate in followers also tends to increase.


We can also take a look at how much of our data set are mature streamers for some insight.

```{r, warning=FALSE}
sprintf(
  "%.2f%% of streamers in the top 1000 stream to a mature audience.",
  nrow(twitch_data %>% filter(Mature == 'True')) / nrow(twitch_data) * 100
)

sprintf(
  "Of that 23%%, %.2f%% of streamers that stream to a mature audience are also partnered.",
  nrow(twitch_data %>% filter(Mature == 'True', Partnered == 'True')) / nrow(twitch_data %>% filter(Mature == 'True')) * 100
)

```


Another important nominal variable to explore is, one of language in which the streamer streams:


```{r, warning=FALSE}
twitch_data %>%
  group_by(Language) %>%
  summarize(Count = n()) %>%
  ggplot(aes(x = reorder(Language, -Count), y = Count)) +
  geom_bar(stat = "identity") +
  labs(x = "Language", y = "Count") +
  coord_flip()
```


From this, we can see that nearly half of the top 1000 streamers, stream in the English language. This can be potentially an important indicator of success. This however can be immediately seen two ways, in one, more English speaking channels make it to the top 1000. This also means that there may be a lot more competition in this language!


```{r, warning=FALSE}
# create a list of ggplot objects for each column
plots <- lapply(names(numeric), function(col) {
  ggplot(numeric, aes(x = !!sym(col))) +
    geom_density() +
    ggtitle(col) +
    theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5)) + 
    scale_x_continuous(labels = scales::comma)
})

# plot the list of ggplot objects in a grid
grid.arrange(grobs = plots, ncol = 3)
```

From the plots above, we can clearly see that all of our data is extremely positively skewed, which means that our Mode and Median are quite a bit larger than the Mean. This can be explained by the fact that there are not that many streamers with extremely high values (e.g., watch time, viewers, or followers) compared to the majority of other channels. This can be observed in all wakes of society, for example income.

## 5. Statistical Analysis {#Statistical-Analysis}
This section will focus on the statistical analysis using various techniques. With a focus on linear regressions.

First, we transform the Language column into a factor, as factors are used within R, to represent categorical variables in statistical modeling, including regression analysis.

```{r, warning=FALSE}
# Convert 'Language' columns to factor type
twitch_data$Language <- as.factor(twitch_data$Language)

# Check the updated types of all columns
sapply(twitch_data, class)
```


In order to statistically evaluate: Should there be a focus on mature content (18+) audience? What are the consequences one decides to do so in terms of audience reactions?

We utilized two linear regression models for this analysis. The first model explores the relationship between mature content and average viewership, while the second model incorporates an interaction term between mature content and streaming time.


```{r}
log_twitch_data <- data.frame(
  Watch.time.hours = log(twitch_data$Watch.time.hours),
  Stream.time.hours = log(twitch_data$Stream.time.hours),
  Peak.viewers = log(twitch_data$Peak.viewers),
  Followers = log(twitch_data$Followers),
  Followers.delta = log(twitch_data$Followers.delta),
  Views.gained = log(twitch_data$Views.gained),
  Average.viewers = log(twitch_data$Average.viewers),
  Partnered = twitch_data$Partnered,
  Mature = twitch_data$Mature,
  Language = twitch_data$Language,
  Channel = twitch_data$Channel  
)
```



The choice of "Average.viewers" as the dependent variable in this analysis stems from the assumption that the number of viewers serves as a reliable proxy for audience reactions or engagement. In other words, if mature content significantly affects the average viewership, it indicates that the audience is reacting to the content type in a certain way.

```{r}
model1 <- lm(Average.viewers ~ Mature + Stream.time.hours + Language + Watch.time.hours + Followers + Followers.delta + Views.gained + Partnered, data = log_twitch_data)
summary(model1)
```

This model includes "Mature" as the main variable of interest and a number of control variables: "Stream.time.hours", "Language", "Channel", "Watch.time.hours", "Followers", "Followers.delta", "Views.gained", and "Partnered". These controls are included to account for factors that could confound the relationship between mature content and average viewership.


```{r}
model2 <- lm(Average.viewers ~ Mature * Stream.time.hours + Language + Watch.time.hours + Followers + Followers.delta + Views.gained + Partnered, data = log_twitch_data)
summary(model2)
```

This model includes the same control variables as Model 1, but also includes an interaction term between "Mature" and "Stream.time.hours". This allows us to explore whether the effect of mature content on viewership varies depending on the length of the stream.




Does this choice lower or increase the chance of becoming a Twitch partner?

To answer this question, you can use a logistic regression model because the outcome ('Partnered') is binary. The 'Mature' variable would be your main predictor. You could also include other predictors to control for confounding variables.



```{r}
# model <- glm(Partnered ~ Mature, data = twitch_data, family = binomial)
# summary(model)
```


Is the effect of the stream minutes larger or smaller in mature content?

To answer this, you can use an interaction term in a regression model. This will allow you to estimate whether the effect of 'Stream.time.hours' on your outcome variable is different for mature and non-mature content.




```{r}
model <- lm(Average.viewers ~ Stream.time.hours * Mature, data = log_twitch_data)
summary(model)
```



In the output, the coefficient for the interaction term 'Stream.time.hours:Mature' indicates whether the effect of streaming time is larger or smaller for mature content.

## 6. Results {#Results}

## 7. Conclusion {#Conclusion}

## 8. Appendix {#Appendix}

## Backburner


```{r, warning=FALSE}
model <- lm(
  Average.viewers ~ (Watch.time.hours + Stream.time.hours + 
                       Peak.viewers + Followers + Followers.delta + 
                       Views.gained + Partnered + Language) * Mature,
  data = twitch_data
)

summary(model)
plot(model)
plot_model(model, type="int")
```

```{r, warning=FALSE}
log_twitch_data <- data.frame(
  Watch.time.hours = log(twitch_data$Watch.time.hours),
  Stream.time.hours = log(twitch_data$Stream.time.hours),
  Peak.viewers = log(twitch_data$Peak.viewers),
  Followers = log(twitch_data$Followers),
  Followers.delta = log(twitch_data$Followers.delta),
  Views.gained = log(twitch_data$Views.gained),
  Average.viewers = log(twitch_data$Average.viewers),
  Partnered = twitch_data$Partnered,
  Mature = twitch_data$Mature,
  Language = twitch_data$Language,
  Channel = twitch_data$Channel  
)

model <- lm(
  Average.viewers ~ (Watch.time.hours + Stream.time.hours + 
                       Peak.viewers + Followers + Followers.delta + 
                       Views.gained + Partnered + Language) * Mature,
  data = log_twitch_data
)

summary(model)
plot(model)
plot_model(model, type="int")
```

